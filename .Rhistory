library(RPostgreSQL)
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname="pirronord",host="localhost",port=5432,user="dncgst",password="gnewpost")
dbListConnections(drv)
dbGetInfo(drv)
summary(con)
db_record <- dbReadTable(con,"record")
db_lithic <- dbGetQuery(con, "SELECT DISTINCT ON (record.code) lithic.id, lithic.code, record.layer, record.us,	record.q,	record.n,	record.type, lithic.lithic_object, lithic.raw_material, lithic.raw_material_type, lithic.raw_material_code,	lithic.integrity,	lithic.length, lithic.width, lithic.thickness,	lithic.cortex, lithic.neocortex, lithic.patina, lithic.fracture, lithic.edge_ridge_rounding, record.date FROM public.lithic LEFT JOIN public.record ON lithic.code = record.code")
dbDisconnect(con)
dbUnloadDriver(drv)
library(sp)
library(rgdal)
ogrDrivers()
ogrListLayers(dsn="PG:host=localhost port=5432 dbname=pirronord")
sp_record <- readOGR(dsn="PG:host=localhost port=5432 dbname=pirronord", "view_sp_record")
class(sp_record)
sp_lithic <- readOGR(dsn="PG:host=localhost port=5432 dbname=pirronord", "view_sp_lithic")
spL <- sp_lithic[,c(1,3,17)]
sp_fauna <- readOGR(dsn="PG:host=localhost port=5432 dbname=pirronord", "view_sp_fauna")
spF <- sp_fauna[,c(1,3,16,17,18,20)]
sp_micro <- readOGR(dsn="PG:host=localhost port=5432 dbname=pirronord", "view_micro")
foo <- sp_record[,c(3,7)] #subset column: layer,type
bar <- sp_micro[,c(3,7)]
spX <- spRbind(foo, bar)
library(sp)
library(rgdal)
spX <- spRbind(foo, bar)
library(spatial)
spX <- spRbind(foo, bar)
library(maptools)
spX <- spRbind(foo, bar)
str(spX)
db_lithic <- subset(db_lithic, db_lithic$layer %in% c("A","B","C","D"))
db_record <- subset(db_record, db_record$layer %in% c("A","B","C","D"))
spX <- subset(spX, spX$layer %in% c("A","B","C","D"))
db_record <- subset(db_record, !db_record$type %in% c("DEL","Coprolite","Shell"))
Xc <- spX[which(spX$layer == "C" & spX$type %in% c("Bone","Tooth","Lithic","Micro")),]
Xd <- spX[which(spX$layer == "D" & spX$type %in% c("Bone","Tooth","Lithic","Micro")),]
library(spatstat)
shp <- readShapePoly("/home/dncgst/project/pirronord_jas-reports/data/window/area_c.shp", proj4string=CRS(as.character(NA))) #import shp as SpatialPolygonsDataframe
shp <- as(shp, "SpatialPolygons") #change to SpatialPolygons
proj4string(shp) #check reference system = NA
bbox(shp) #check the extension of the bounding box
c <- as(shp, "owin") # convert to owin object
c
plot(c)
shp <- readShapePoly("/home/dncgst/project/pirronord_jas-reports/data/window/area_d.shp", proj4string=CRS(as.character(NA))) #import shp as SpatialPolygonsDataframe
shp <- as(shp, "SpatialPolygons") #change to SpatialPolygons
proj4string(shp) #check reference system = NA
bbox(shp) #check the extension of the bounding box
d <- as(shp, "owin") # convert to owin object
d
plot(d)
X <- spCbind(Xc, Xc$coords.x3)
names(X)[3] <- "z"
record.c <- as(X[,c(2,3)], "ppp")
record.c$window <- c
unitname(record.c) <- "meter"
marks(record.c)
levels(record.c$marks$type)
record.c$marks$type <- droplevels(record.d$marks$type)
record.c$marks$type <- droplevels(record.c$marks$type)
levels(record.c$marks$type)
levels(record.c$marks$type) <- c("Fauna", "Lithic", "Fauna", "A.ruffoi")
X <- spCbind(Xd, Xd$coords.x3)
names(X)[3] <- "z"
record.d <- as(X[,c(2,3)], "ppp")
record.d$window <- d
unitname(record.d) <- "meter"
marks(record.d)
levels(record.d$marks$type)
record.d$marks$type <- droplevels(record.d$marks$type)
levels(record.d$marks$type) <- c("Fauna", "Lithic", "Fauna", "A.ruffoi")
record.c[which(record.c$marks$type == "A.ruffoi")] <- rjitter(record.c[which(record.c$marks$type == "A.ruffoi")], 0.5, retry=TRUE)
record.d[which(record.d$marks$type == "A.ruffoi")] <- rjitter(record.d[which(record.d$marks$type == "A.ruffoi")], 0.5, retry=TRUE)
summary(Xc$coords.x3)
mean <- mean(Xc$coords.x3) # C: -1.528509 meter; D: -2.352142
sd <- sd(Xc$coords.x3) # C: 0.2733552 meter; D: 0.3341567
xlimC <- c(-3, 0)
xlimD <- c(-3.8, -.8)
hist(Xc$coords.x3, nclass=15, prob=TRUE, xlim=xlimC, xlab="z(meter)")
hist(Xd$coords.x3, nclass=15, prob=TRUE, xlim=xlimD, ylim=c(0,1.5), xlab="z(meter)")
curve(dnorm(x, mean(Xd$coords.x3), sd(Xd$coords.x3)), col="grey", lwd=2, add=TRUE)
curve(dnorm(x, mean=-2.352142361, sd=0.334064143), col="red", lwd=2, add=TRUE)
library(MASS)
fitdistr(Xc$coords.x3, "normal")
shapiro.test(Xc$coords.x3) #p-value = 0.0005213 -> reject H0 (normal distribution)
shapiro.test(Xd$coords.x3) #p-value = 2.497e-12 -> reject H0 (normal distribution)
hist(Xc$coords.x3[which(Xc$type %in% c("Bone","Tooth"))], nclass=15, prob=TRUE, xlim=xlimC, xlab="z(meter)")
hist(Xc$coords.x3[which(Xc$type == "Lithic")], nclass=15, prob=TRUE, xlim=xlimC, xlab="z(meter)")
hist(Xc$coords.x3[which(Xc$type == "Micro")], nclass=5, prob=TRUE, xlim=xlimC, xlab="z(meter)")
hist(Xd$coords.x3[which(Xd$type %in% c("Bone","Tooth"))], nclass=15, prob=TRUE, xlim=xlimD, xlab="z(meter)")
hist(Xd$coords.x3[which(Xd$type == "Lithic")], nclass=15, prob=TRUE, xlim=xlimD, xlab="z(meter)")
hist(Xd$coords.x3[which(Xd$type == "Micro")], nclass=10, prob=TRUE, xlim=xlimD, xlab="z(meter)")
qqnorm(Xc$coords.x3); qqline(Xc$coords.x3, col=2)
qqnorm(Xc$coords.x3[which(Xc$type == "Lithic")]); qqline(Xc$coords.x3[which(Xc$type == "Lithic")], col=2)
qqnorm(Xd$coords.x3); qqline(Xd$coords.x3, col=2)
qqnorm(Xd$coords.x3[which(Xd$type == "Lithic")]); qqline(Xd$coords.x3[which(Xd$type == "Lithic")], col=2)
boxplot(Xc$coords.x3)
boxplot(Xd$coords.x3)
spL <- spL[which(spL$layer %in% c("C", "D")),]
spL <- spL[complete.cases(spL$patina),]
summary(spL)
Lc <- spL[which(spL$layer == "C"),]
Ld <- spL[which(spL$layer == "D"),]
hist(spL$coords.x3, nclass=25, prob=TRUE, xlim=c(-3.5, 0), main="b", xlab="z(meter)")
Fc <- spF[which(spF$layer == "C"),]
Fc <- Fc[complete.cases(Fc$oxid),]
str(Fc)
plot(record.d)
summary(record.d)
sum(intensity(record.d))
H <- hextess(unmark(record.d), 0.2)
Q <- quadratcount(unmark(record.d), tess=H)
plot(intensity(Q, image=TRUE))
LRc <- scanLRTS(record.c, r=2*bw.diggle(unmark(record.c)))
LRd <- scanLRTS(record.d, r=2*bw.diggle(unmark(record.d)))
pval.c <- eval.im(pchisq(LRc, df=1, lower.tail=FALSE))
pval.d <- eval.im(pchisq(LRd, df=1, lower.tail=FALSE))
plot(pval.c)
plot(pval.d)
test <- berman.test(unmark(record.d), "x")
plot(test)
test <- cdf.test(unmark(record.d), "x")
plot(test)
plot(roc(unmark(record.d), Zd, high=TRUE))
plot(roc(unmark(record.d), "x", high=TRUE))
auc(unmark(record.d), "x", high=FALSE) #C:0.3492367 D:0.3480422
hist(record.d$x)
Xr.c <- record.c
marks(Xr.c) <- marks(Xr.c)[,1]
Xr.d <- record.d
marks(Xr.d) <- marks(Xr.d)[,1]
library(ggplot2)
# Multiple plot function
#
# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)
# - cols:   Number of columns in layout
# - layout: A matrix specifying the layout. If present, 'cols' is ignored.
#
# If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),
# then plot 1 will go in the upper left, 2 will go in the upper right, and
# 3 will go all the way across the bottom.
#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
Xp.c <- as(Ld[,3], "ppp")
Xp.c$window <- c
unitname(Xp.c) <- "meter"
marks(Xp.c)
Xp.c <- subset(Xc.d, Xc.d$marks != "Brown")
Xp.c <- subset(Xp.c, Xp.c$marks != "Brown")
Xp.c <- subset(Xp.c, Xp.c$marks != "White")
marks(Xp.c)
Xp.c$marks <- droplevels(Xp.c$marks)
marks(Xp.c)
Xp.c <- as(Lc[,3], "ppp")
Xp.c$window <- c
unitname(Xp.c) <- "meter"
marks(Xp.c)
Xp.c <- subset(Xp.c, Xp.c$marks != "Brown")
Xp.c <- subset(Xp.c, Xp.c$marks != "White")
Xp.c$marks <- droplevels(Xp.c$marks)
Xp.d <- as(Ld[,3], "ppp")
Xp.d$window <- d
unitname(Xp.d) <- "meter"
marks(Xp.d)
Xp.d <- subset(Xp.d, Xp.d$marks != "Brown")
Xp.d <- subset(Xp.d, Xp.d$marks != "White")
Xp.d$marks <- droplevels(Xp.d$marks)
Ec <- envelope(Xp.c, Kdif, nsim=199, i="Fe-Mn", global=FALSE, simulate=expression(rlabel(Xp.c)), correction="Ripley")
Kdif <- function(X, ..., i) {
Kidot <- Kdot(X, ..., i = i)
K <- Kest(X, ...)
dif <- eval.fv(Kidot - K)
return(dif)
}
Ec <- envelope(Xp.c, Kdif, nsim=199, i="Fe-Mn", global=FALSE, simulate=expression(rlabel(Xp.c)), correction="Ripley")
levels(Xp.c$marks) <- c("Absent","Fe-Mn","Fe-Mn")
Ec <- envelope(Xp.c, Kdif, nsim=199, i="Fe-Mn", global=FALSE, simulate=expression(rlabel(Xp.c)), correction="Ripley")
sessionInfo()
sessionInfo()
